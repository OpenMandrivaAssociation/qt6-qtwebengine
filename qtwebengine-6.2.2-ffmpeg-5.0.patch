diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.h.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.h
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.h.omv~	2022-01-16 16:46:13.985381820 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.h	2022-01-16 16:46:28.056457342 +0100
@@ -34,6 +34,7 @@ extern "C" {
 #include <libavutil/mastering_display_metadata.h>
 #include <libavutil/mathematics.h>
 #include <libavutil/opt.h>
+#include <libavutil/channel_layout.h>
 }  // extern "C"
 
 namespace media {
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/audio_file_reader.cc.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/audio_file_reader.cc
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/audio_file_reader.cc.omv~	2022-01-16 21:52:39.753679831 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/audio_file_reader.cc	2022-01-16 21:52:43.359697715 +0100
@@ -85,7 +85,7 @@ bool AudioFileReader::OpenDemuxer() {
 }
 
 bool AudioFileReader::OpenDecoder() {
-  AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
+  const AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (codec) {
     // MP3 decodes to S16P which we don't support, tell it to use S16 instead.
     if (codec_context_->sample_fmt == AV_SAMPLE_FMT_S16P)
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_audio_decoder.cc.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_audio_decoder.cc
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_audio_decoder.cc.omv~	2022-01-16 21:52:25.269608004 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_audio_decoder.cc	2022-01-16 21:57:07.085007362 +0100
@@ -99,8 +99,6 @@ void FFmpegAudioDecoder::Initialize(cons
     return;
   }
 
-  FFmpegGlue::InitializeFFmpeg();
-
   if (!ConfigureDecoder(config)) {
     av_sample_format_ = 0;
     std::move(bound_init_cb).Run(StatusCode::kDecoderFailedInitialization);
@@ -335,7 +333,7 @@ bool FFmpegAudioDecoder::ConfigureDecode
     }
   }
 
-  AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
+  const AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec ||
       avcodec_open2(codec_context_.get(), codec, &codec_options) < 0) {
     DLOG(ERROR) << "Could not initialize audio decoder: "
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc.omv~	2022-01-16 21:52:06.990517375 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc	2022-01-16 21:58:03.712288919 +0100
@@ -50,6 +50,7 @@
 #include "media/formats/webm/webm_crypto_helpers.h"
 #include "media/media_buildflags.h"
 #include "third_party/ffmpeg/ffmpeg_features.h"
+#include <libavcodec/packet.h>
 
 #if BUILDFLAG(ENABLE_PLATFORM_HEVC)
 #include "media/filters/ffmpeg_h265_to_annex_b_bitstream_converter.h"
@@ -100,12 +101,12 @@ static base::TimeDelta ExtractStartTime(
 
   // Next try to use the first DTS value, for codecs where we know PTS == DTS
   // (excludes all H26x codecs). The start time must be returned in PTS.
-  if (stream->first_dts != kNoFFmpegTimestamp &&
+  if (av_stream_get_first_dts(stream) != kNoFFmpegTimestamp &&
       stream->codecpar->codec_id != AV_CODEC_ID_HEVC &&
       stream->codecpar->codec_id != AV_CODEC_ID_H264 &&
       stream->codecpar->codec_id != AV_CODEC_ID_MPEG4) {
     const base::TimeDelta first_pts =
-        ConvertFromTimeBase(stream->time_base, stream->first_dts);
+        ConvertFromTimeBase(stream->time_base, av_stream_get_first_dts(stream));
     if (first_pts < start_time)
       start_time = first_pts;
   }
@@ -421,11 +422,11 @@ void FFmpegDemuxerStream::EnqueuePacket(
   scoped_refptr<DecoderBuffer> buffer;
 
   if (type() == DemuxerStream::TEXT) {
-    int id_size = 0;
+    size_t id_size = 0;
     uint8_t* id_data = av_packet_get_side_data(
         packet.get(), AV_PKT_DATA_WEBVTT_IDENTIFIER, &id_size);
 
-    int settings_size = 0;
+    size_t settings_size = 0;
     uint8_t* settings_data = av_packet_get_side_data(
         packet.get(), AV_PKT_DATA_WEBVTT_SETTINGS, &settings_size);
 
@@ -437,7 +438,7 @@ void FFmpegDemuxerStream::EnqueuePacket(
     buffer = DecoderBuffer::CopyFrom(packet->data, packet->size,
                                      side_data.data(), side_data.size());
   } else {
-    int side_data_size = 0;
+    size_t side_data_size = 0;
     uint8_t* side_data = av_packet_get_side_data(
         packet.get(), AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL, &side_data_size);
 
@@ -498,7 +499,7 @@ void FFmpegDemuxerStream::EnqueuePacket(
                                        packet->size - data_offset);
     }
 
-    int skip_samples_size = 0;
+    size_t skip_samples_size = 0;
     const uint32_t* skip_samples_ptr =
         reinterpret_cast<const uint32_t*>(av_packet_get_side_data(
             packet.get(), AV_PKT_DATA_SKIP_SAMPLES, &skip_samples_size));
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_glue.cc.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_glue.cc
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_glue.cc.omv~	2022-01-16 16:44:08.208706890 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_glue.cc	2022-01-16 16:45:04.226007453 +0100
@@ -58,10 +58,6 @@ static int64_t AVIOSeekOperation(void* o
   return new_offset;
 }
 
-void FFmpegGlue::InitializeFFmpeg() {
-  av_register_all();
-}
-
 static void LogContainer(bool is_local_file,
                          container_names::MediaContainerName container) {
   base::UmaHistogramSparse("Media.DetectedContainer", container);
@@ -70,8 +66,6 @@ static void LogContainer(bool is_local_f
 }
 
 FFmpegGlue::FFmpegGlue(FFmpegURLProtocol* protocol) {
-  InitializeFFmpeg();
-
   // Initialize an AVIOContext using our custom read and seek operations.  Don't
   // keep pointers to the buffer since FFmpeg may reallocate it on the fly.  It
   // will be cleaned up
@@ -95,9 +89,6 @@ FFmpegGlue::FFmpegGlue(FFmpegURLProtocol
   // Enable fast, but inaccurate seeks for MP3.
   format_context_->flags |= AVFMT_FLAG_FAST_SEEK;
 
-  // Ensures we can read out various metadata bits like vp8 alpha.
-  format_context_->flags |= AVFMT_FLAG_KEEP_SIDE_DATA;
-
   // Ensures format parsing errors will bail out. From an audit on 11/2017, all
   // instances were real failures. Solves bugs like http://crbug.com/710791.
   format_context_->error_recognition |= AV_EF_EXPLODE;
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_glue.h.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_glue.h
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_glue.h.omv~	2022-01-16 16:44:41.576885921 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_glue.h	2022-01-16 16:44:44.678902566 +0100
@@ -63,8 +63,6 @@ class MEDIA_EXPORT FFmpegURLProtocol {
 
 class MEDIA_EXPORT FFmpegGlue {
  public:
-  static void InitializeFFmpeg();
-
   // See file documentation for usage.  |protocol| must outlive FFmpegGlue.
   explicit FFmpegGlue(FFmpegURLProtocol* protocol);
   ~FFmpegGlue();
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_video_decoder.cc.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_video_decoder.cc
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_video_decoder.cc.omv~	2022-01-16 21:59:10.415619445 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/ffmpeg_video_decoder.cc	2022-01-16 21:59:25.295691883 +0100
@@ -81,7 +81,6 @@ static void ReleaseVideoBufferImpl(void*
 
 // static
 bool FFmpegVideoDecoder::IsCodecSupported(VideoCodec codec) {
-  FFmpegGlue::InitializeFFmpeg();
   return avcodec_find_decoder(VideoCodecToCodecID(codec)) != nullptr;
 }
 
@@ -427,7 +426,7 @@ bool FFmpegVideoDecoder::ConfigureDecode
   if (decode_nalus_)
     codec_context_->flags2 |= AV_CODEC_FLAG2_CHUNKS;
 
-  AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
+  const AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec || avcodec_open2(codec_context_.get(), codec, NULL) < 0) {
     ReleaseFFmpegResources();
     return false;
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/media_file_checker.cc.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/media_file_checker.cc
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/media_file_checker.cc.omv~	2022-01-16 21:59:31.105720182 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/media/filters/media_file_checker.cc	2022-01-16 21:59:34.130734919 +0100
@@ -68,7 +68,7 @@ bool MediaFileChecker::Start(base::TimeD
       auto context = AVStreamToAVCodecContext(format_context->streams[i]);
       if (!context)
         continue;
-      AVCodec* codec = avcodec_find_decoder(cp->codec_id);
+      const AVCodec* codec = avcodec_find_decoder(cp->codec_id);
       if (codec && avcodec_open2(context.get(), codec, nullptr) >= 0) {
         auto loop = std::make_unique<FFmpegDecodingLoop>(context.get());
         stream_contexts[i] = {std::move(context), std::move(loop)};
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc.omv~	2022-01-16 23:23:29.439568238 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc	2022-01-16 23:23:52.294633083 +0100
@@ -180,13 +180,8 @@ void PeerConnectionDependencyFactory::Cr
 
 #if BUILDFLAG(RTC_USE_H264) && BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
   // Building /w |rtc_use_h264|, is the corresponding run-time feature enabled?
-  if (base::FeatureList::IsEnabled(
+  if (!base::FeatureList::IsEnabled(
           blink::features::kWebRtcH264WithOpenH264FFmpeg)) {
-    // |H264DecoderImpl| may be used which depends on FFmpeg, therefore we need
-    // to initialize FFmpeg before going further.
-    media::FFmpegGlue::InitializeFFmpeg();
-  } else {
-    // Feature is to be disabled, no need to make sure FFmpeg is initialized.
     webrtc::DisableRtcUseH264();
   }
 #else
diff -up qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/third_party/webrtc/modules/video_coding/codecs/h264/h264_decoder_impl.cc.omv~ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/third_party/webrtc/modules/video_coding/codecs/h264/h264_decoder_impl.cc
--- qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/third_party/webrtc/modules/video_coding/codecs/h264/h264_decoder_impl.cc.omv~	2022-01-16 22:42:39.779545492 +0100
+++ qtwebengine-everywhere-src-6.2.2/src/3rdparty/chromium/third_party/webrtc/modules/video_coding/codecs/h264/h264_decoder_impl.cc	2022-01-16 22:42:43.553564263 +0100
@@ -202,7 +202,7 @@ int32_t H264DecoderImpl::InitDecode(cons
   // a pointer |this|.
   av_context_->opaque = this;
 
-  AVCodec* codec = avcodec_find_decoder(av_context_->codec_id);
+  const AVCodec* codec = avcodec_find_decoder(av_context_->codec_id);
   if (!codec) {
     // This is an indication that FFmpeg has not been initialized or it has not
     // been compiled/initialized with the correct set of codecs.
