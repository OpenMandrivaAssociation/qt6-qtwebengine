diff -up qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/third_party/webrtc/modules/video_coding/codecs/h264/h264_decoder_impl.cc.omv~ qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/third_party/webrtc/modules/video_coding/codecs/h264/h264_decoder_impl.cc
--- qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/third_party/webrtc/modules/video_coding/codecs/h264/h264_decoder_impl.cc.omv~	2024-04-06 20:17:43.764300895 +0200
+++ qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/third_party/webrtc/modules/video_coding/codecs/h264/h264_decoder_impl.cc	2024-04-06 20:18:47.132869073 +0200
@@ -229,7 +229,6 @@ int H264DecoderImpl::AVGetBuffer2(AVCode
   int total_size = y_size + 2 * uv_size;
 
   av_frame->format = context->pix_fmt;
-  av_frame->reordered_opaque = context->reordered_opaque;
 
   // Create a VideoFrame object, to keep a reference to the buffer.
   // TODO(nisse): The VideoFrame's timestamp and rotation info is not used.
@@ -378,7 +377,6 @@ int32_t H264DecoderImpl::Decode(const En
   }
   packet->size = static_cast<int>(input_image.size());
   int64_t frame_timestamp_us = input_image.ntp_time_ms_ * 1000;  // ms -> Î¼s
-  av_context_->reordered_opaque = frame_timestamp_us;
 
   int result = avcodec_send_packet(av_context_.get(), packet.get());
 
@@ -395,10 +393,6 @@ int32_t H264DecoderImpl::Decode(const En
     return WEBRTC_VIDEO_CODEC_ERROR;
   }
 
-  // We don't expect reordering. Decoded frame timestamp should match
-  // the input one.
-  RTC_DCHECK_EQ(av_frame_->reordered_opaque, frame_timestamp_us);
-
   // TODO(sakal): Maybe it is possible to get QP directly from FFmpeg.
   h264_bitstream_parser_.ParseBitstream(input_image);
   absl::optional<int> qp = h264_bitstream_parser_.GetLastSliceQp();
diff -up qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc.omv~ qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc
--- qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc.omv~	2024-04-07 00:48:10.925422334 +0200
+++ qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc	2024-04-07 00:48:44.505707777 +0200
@@ -336,10 +336,10 @@ bool AVCodecContextToAudioDecoderConfig(
       codec_context->sample_fmt, codec_context->codec_id);
 
   ChannelLayout channel_layout =
-      codec_context->channels > 8
+      codec_context->ch_layout.nb_channels > 8
           ? CHANNEL_LAYOUT_DISCRETE
-          : ChannelLayoutToChromeChannelLayout(codec_context->channel_layout,
-                                               codec_context->channels);
+          : ChannelLayoutToChromeChannelLayout(codec_context->ch_layout.u.mask,
+                                               codec_context->ch_layout.nb_channels);
 
   switch (codec) {
     // For AC3/EAC3 we enable only demuxing, but not decoding, so FFmpeg does
diff -up qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/media/filters/audio_file_reader.cc.omv~ qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/media/filters/audio_file_reader.cc
--- qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/media/filters/audio_file_reader.cc.omv~	2024-04-07 00:46:28.264557924 +0200
+++ qtwebengine-everywhere-src-6.7.0/src/3rdparty/chromium/media/filters/audio_file_reader.cc	2024-04-07 00:46:39.764654086 +0200
@@ -243,18 +243,10 @@ bool AudioFileReader::OnNewFrame(
   // silence from being output. In the case where we are also discarding some
   // portion of the packet (as indicated by a negative pts), we further want to
   // adjust the duration downward by however much exists before zero.
-#if BUILDFLAG(USE_SYSTEM_FFMPEG)
-  if (audio_codec_ == AudioCodec::kAAC && frame->pkt_duration) {
-#else
   if (audio_codec_ == AudioCodec::kAAC && frame->duration) {
-#endif  // BUILDFLAG(USE_SYSTEM_FFMPEG)
     const base::TimeDelta pkt_duration = ConvertFromTimeBase(
         glue_->format_context()->streams[stream_index_]->time_base,
-#if BUILDFLAG(USE_SYSTEM_FFMPEG)
-        frame->pkt_duration + std::min(static_cast<int64_t>(0), frame->pts));
-#else
         frame->duration + std::min(static_cast<int64_t>(0), frame->pts));
-#endif  // BUILDFLAG(USE_SYSTEM_FFMPEG)
     const base::TimeDelta frame_duration =
         base::Seconds(frames_read / static_cast<double>(sample_rate_));
 
